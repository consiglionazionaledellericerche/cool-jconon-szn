image: docker:latest
services:
  - docker:dind

stages:
  - deploy
  - build
  - catapult
  - release

variables:
  MAVEN_OPTS: "-Djava.awt.headless=true -Dmaven.repo.local=./.m2/repository -Dnexus.url=$NEXUS_URL -Dnexus.login=$NEXUS_USERNAME -Dnexus.pwd=$NEXUS_PASSWORD"
  MAVEN_CLI_OPTS: "-s .m2/settings.xml --batch-mode --errors --fail-at-end --show-version"
  CONTAINER_TEST_IMAGE: $CI_PROJECT_PATH:$CI_COMMIT_REF_NAME
  CONTAINER_RELEASE_IMAGE: $CI_PROJECT_PATH:latest

cache:
  paths:
    - ./.m2/repository
  # keep cache across branch
  key: "$CI_BUILD_REF_NAME"
  
maven-deploy:
  stage: deploy
  image: maven:alpine
  script: "mvn clean deploy $MAVEN_CLI_OPTS"
  artifacts:
    paths:
      - target/*.war

#Ad ogni nuovo commit sul master viene fatta la push sul docker registry.
docker-build-push-master:
  stage: build
  script:
    - docker build -t $CONTAINER_TEST_IMAGE .  
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker tag $CONTAINER_TEST_IMAGE $CI_REGISTRY/$CONTAINER_RELEASE_IMAGE
    - docker push $CI_REGISTRY/$CONTAINER_RELEASE_IMAGE
  only:
    - master

#Aggiorno il container con l'immagine docker creata.
catapult-deploy-image:
  stage: catapult
  before_script:
    - apk add --update curl && rm -rf /var/cache/apk/*
  script:
    - >
      curl --fail -s  -X POST $CATAPULT_URL -H 'Content-type:application/json' --data '{"id":"'"$CI_PROJECT_PATH:$CI_COMMIT_REF_NAME"'"}'

#la release Ã¨ opzionale e manuale.
Perform Maven Release:
  stage: release
  image: maven:alpine
  before_script:
    - 'which git || (apk add --update git && rm -rf /var/cache/apk/*)'
    - 'which ssh-agent || (apk add --update openssh-client && rm -rf /var/cache/apk/* )'
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$GIT_SSH_PRIV_KEY")
    - git config --global user.email "marco.spasiano@cnr.it"
    - git config --global user.name "marco.spasiano"
 script:
    - "mvn $MAVEN_CLI_OPTS -Dresume=false release:prepare release:perform -Pprod -DskipTests"
  only:
    - master
  when: manual
  